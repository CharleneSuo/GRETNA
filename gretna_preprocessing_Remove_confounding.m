function gretna_preprocessing_Remove_confounding(Data_path, File_filter, Path_cov, Num_cov, Data_mask)

%==========================================================================
% This function is used to remove the effects of several nuisance signals
% from EPI data time course in a voxel-wise manner. NOTE, the resultant
% iamges will be started with prefix 'rem_'.
%
%
% Syntax: function gretna_preprocessing_Remove_confounding(Data_path, File_filter, Path_cov, Num_cov, Data_mask)
%
% Inputs:
%       Data_path:
%                   The directory & filename of a .txt file that contains
%                   the directory of those files to be processed (can be
%                   obtained by gretna_gen_data_path.m).
%       File_filter:
%                   The prefix of those files to be processed.
%       Path_cov:
%                   The directory & filename of a .txt file that contains
%                   the directory & filename of those covariates (can be
%                   obtained by gretna_gen_cov_path.m). The covariates
%                   should be sorted in a .txt file for each subject (like
%                   the rp_**_.txt generated by realignment in spm). The #
%                   of rows in these covariates should be equal to the # of
%                   time points of EPI images.
%       Num_cov:
%                   The number of covariates (i.e., .txt files) for each
%                   subject.
%       Data_mask:
%                   The brain mask within which the analysis is executed.
%
% Jinhui WANG, NKLCNL, BNU, BeiJing, 2009/08/16, Jinhui.Wang.1982@gmail.com
%==========================================================================

Vmask = spm_vol(Data_mask);
[Ymask, ~] = spm_read_vols(Vmask);
Ymask(isnan(Ymask)) = 0;
Ymask(logical(Ymask)) = 1;

Rows = Vmask.dim(1); Columns= Vmask.dim(2); Slices = Vmask.dim(3);

ind_mask = cell(Slices,1);
for k = 1:Vmask.dim(3)
    ind_mask{k} = find(Ymask(:,:,k)) ;
end

fid = fopen(Data_path);
Dir_data = textscan(fid, '%s');
fclose(fid);

fid = fopen(Path_cov);
Dir_cov = textscan(fid, '%s');
fclose(fid);

Num_subs = size(Dir_data{1},1);

for i = 1:Num_subs
    
    fprintf('Performing removal of covariates for %s\n', [Dir_data{1}{i}]);
    
    % confounding
    cov_var = [];
    for tt = 1:Num_cov
        tmp = load(Dir_cov{1}{Num_cov*(i-1)+tt});
        cov_var = [tmp cov_var];
    end
    
    cd ([Dir_data{1}{i}])
    File_name = spm_select('List',pwd, ['^' File_filter '.*\.img$']);
    if isempty(File_name)
        File_name = spm_select('List',pwd, ['^' File_filter '.*\.nii$']);
    end
    
    Vin = spm_vol(File_name);
    Timepoints = size(Vin,1);
    
    Vout = Vin;
    for t = 1:Timepoints
        [pth,nm,xt] = fileparts(deblank(Vin(t).fname));
        Vout(t).fname  = fullfile(pth,['rem_' nm xt]);
        Vout(t).dt(1) = 16;
    end
    Vout = spm_create_vol(Vout);
    
    for k = 1:Slices
        
        SliceData = zeros(Rows,Columns,Timepoints);
        
        if ~isempty(ind_mask{k})
            for t = 1:Timepoints
                SliceData(:,:,t) = spm_slice_vol(Vin(t),spm_matrix([0 0 k]),[Rows Columns],0);
            end
            
            SliceData = reshape(SliceData,Rows*Columns,Timepoints);
            
            stat = gretna_glm(SliceData(ind_mask{k},:)', cov_var, 'r');
            SliceData(ind_mask{k},:) = stat.r';
            
            SliceData = reshape(SliceData, Rows, Columns,Timepoints);
        end
        
        for t = 1:Timepoints
            Vout(t) = spm_write_plane(Vout(t),SliceData(:,:,t),k);
        end
        
    end
    
    fprintf('Performing removal of covariates for %s ...... is done\n', [Dir_data{1}{i}]);
    
end

return